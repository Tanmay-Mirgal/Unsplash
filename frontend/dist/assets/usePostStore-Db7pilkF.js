import{d as g,e as l,_ as n}from"./index-uah-2sAv.js";const E=g((e,d)=>({posts:[],isLoading:!1,isError:!1,error:null,createPost:async a=>{var o,s;try{e({isLoading:!0,isError:!1,error:null});const r=await l.post("/post/create",a,{headers:{"Content-Type":"multipart/form-data"}}),t=d().posts;return e({posts:[...t,r.data],isLoading:!1}),r}catch(r){console.error("Error creating post:",r),e({isLoading:!1,isError:!0,error:((s=(o=r.response)==null?void 0:o.data)==null?void 0:s.message)||"An unexpected error occurred"})}},getPostById:async a=>{var o,s;e({isError:!1,error:null});try{const t=(await l.get(`/posts/get-post/${a}`)).data.post;e({post:t,isLoading:!1});const i=JSON.parse(localStorage.getItem("user")||"{}"),c={...i,posts:[...i.posts||[],t]};return localStorage.setItem("user",JSON.stringify(c)),n.success("Post retrieved successfully"),t}catch(r){const t=((s=(o=r.response)==null?void 0:o.data)==null?void 0:s.message)||"An unexpected error occurred";e({isLoading:!1,isError:!0,error:t}),n.error(t),console.error(r)}},getAllPosts:async()=>{var a,o,s;try{e({isLoading:!0,isError:!1,error:null});const r=await l.get("/post");if((a=r==null?void 0:r.data)!=null&&a.posts)return e({posts:r.data.posts,isLoading:!1}),r.data.posts;e({isLoading:!1,isError:!0,error:"No posts found"}),n.error("No posts found")}catch(r){if(r.code==="ERR_NETWORK")e({isLoading:!1,isError:!0,error:"Network Error"}),n.error("Network Error");else{const t=((s=(o=r.response)==null?void 0:o.data)==null?void 0:s.message)||"An unexpected error occurred";e({isLoading:!1,isError:!0,error:t}),n.error(t)}console.error(r)}},getUserPosts:async()=>{var a,o;try{e({isLoading:!0,isError:!1,error:null});const s=await l.get("/post/user"),{posts:r}=s.data;return e({posts:r,isLoading:!1}),n.success("User posts retrieved successfully"),r}catch(s){const r=((o=(a=s.response)==null?void 0:a.data)==null?void 0:o.message)||"An unexpected error occurred";e({isLoading:!1,isError:!0,error:r}),n.error(r),console.error("Error fetching user posts:",s)}},deletePost:async a=>{var o,s,r,t,i;console.log("Post ID to delete:",a);try{e({isLoading:!0,isError:!1,error:null});const c=await l.delete(`/post/delete/${a}`),u=d().posts.filter(p=>p._id!==a);return e({posts:u,isLoading:!1}),n.success("Post deleted successfully"),c}catch(c){console.error("Error in deletePost:",((o=c.response)==null?void 0:o.data)||c.message),e({isLoading:!1,isError:!0,error:((r=(s=c.response)==null?void 0:s.data)==null?void 0:r.error)||"Server error"}),n.error(((i=(t=c.response)==null?void 0:t.data)==null?void 0:i.error)||"Server error")}}}));export{E as u};
